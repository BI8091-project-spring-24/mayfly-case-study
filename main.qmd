---
title: "main document"
format: html
editor: visual
---

## Info

This file documents the different steps in the mayfly case study, created for the course Advanced biology BI8091 spring 2024.

## Setup

Setup: Load needed packages, and download data.

```{r setup}
#| output: false

## Custom install & load function
install.load.package <- function(x) {
  if (!require(x, character.only = TRUE)) {
    install.packages(x, repos = "http://cran.us.r-project.org")
  }
  require(x, character.only = TRUE)
}

package_vec <- c("here","dplyr","knitr",
                 "ggplot2","rgbif",
                 "here", "CoordinateCleaner",
                 "terra", "sf") # specify package

## executing install & load for each package
sapply(package_vec, install.load.package)

```

The example data in this case is *Baetis rhodani* occurrence data from GBIF. Example on how to download can be found here: "https://data-blog.gbif.org/post/downloading-long-species-lists-on-gbif/". Download criteria:

-   Species: Baetis rhodani

-   Geographic area: Norway

-   Basis of record: Everything

-   Year range: 1950-current

```{r load_data}
#| output: true
#| error: true

# Load script
# this doesn't work for me: (A)
#  source(here::here("code","download.R"))

#### Loading already downloaded data (TEMPORARY SOLUTION) -------------------

# data URL
mayfly_records <- "https://ntnu.box.com/shared/static/oky8o2cha6nek1jjexum29qqh0fk7asm.rda"

# Download file (NB: requires you to make "data" directory beforehand)
#download.file(mayfly_records, here("data", "insectdata.rda"))

## Load data
load(here("data", "insectdata.rda"))

```

## Data cleaning

### 1. Remove flagged coordinate and time records

First, plot the raw coordinates to get an overview of the data:

```{r plot_data}
#| trunca: true

# Download world map 
wm <- borders("world", colour = "gray50", fill = "gray50")

# Plot data to get an overview
ggplot() +
  coord_fixed() +
  wm +
  geom_point(data = insectdata,
             aes(x = decimalLongitude, y = decimalLatitude),
             colour = "darkred",
             size = 0.5) +
  theme_classic()



```

Then, remove records with problematic coordinates and plot the flagged records.

```{r clean_coords}
## 2.2. Remove records with problematic coordinates ----

# Extract coordinate flags
coord_flags <- clean_coordinates(x = insectdata,
                                      lon = "decimalLongitude", 
                                      lat = "decimalLatitude",
                                      species = "acceptedScientificName",
                                      test = c("centroids", "equal", "gbif", "zeros"))

# Get a summary of the detected flags
summary(coord_flags) # only 3 records flagged (centroids)

# Plot flagged records
plot(coord_flags, lon = "decimalLongitude", lat = "decimalLatitude")

# Exclude flagged records
insectdata_coords <- insectdata[coord_flags$.summary, ]
```

Finally, we test for temporal outliers on the taxon level, and remove the records:

```{r clean_time}
# Test for temporal outliers on taxon level
time_flags <- cf_age(x = insectdata_coords,
                  lon = "decimalLongitude",
                  lat = "decimalLatitude",
                  taxon = "species", 
                  min_age = "year", 
                  max_age = "year", 
                  value = "flagged") # Flagged 8 records

# Exclude records flagged for temporal outliers
insectdata_no_flags <- insectdata_coords[time_flags, ] 
```

### 2. Use metadata to improve data quality

To improve the precision and our confidence in the data further, we can use the metadata included in the dataset.

First, we make a boxplot of the coordinate precisions reported for the insect data:

```{r coord_boxplot}
# Boxplot of coordinate precision in insect data
ggplot(insectdata_no_flags, aes(x = coordinateUncertaintyInMeters)) +
  geom_boxplot(bins = 30, na.rm = TRUE) +
  labs(x = "Coordinate Uncertainty (m)", y = "Frequency") +
  theme_minimal() # A few records with relatively high coordinate uncertainty
```

Then, we calculate some summary stats for the coordinate uncertainties, make a table of each value's frequency, and inspect it:

```{r coord_summary}
mean(insectdata_no_flags$coordinateUncertaintyInMeters,
     na.rm = TRUE) #385.518
min(insectdata_no_flags$coordinateUncertaintyInMeters,
    na.rm = TRUE) #0.05
max(insectdata_no_flags$coordinateUncertaintyInMeters,
    na.rm = TRUE) #79110

# Table of frequency of each value of Coordinate Uncertainty
value_counts <- table(insectdata_no_flags$coordinateUncertaintyInMeters)
rmarkdown::paged_table(data.frame(value_counts))

# Which Coordinate uncertainty value is most common?
sorted_value_counts <- sort(value_counts, decreasing = TRUE)
most_frequent_value <- names(sorted_value_counts)[1]
most_frequent_value #1m coordinate uncertainty most frequent
```

Then, remove records with coordinate uncertainty \>3km and records with NA for coordinate uncertainty:

```{r}

# Remove records with coordinate uncertainty >3km and records with NA for coordinate uncertainty
insectdata_low_uncertainty <- insectdata_no_flags |>
  filter(coordinateUncertaintyInMeters <= 3000 | 
           is.na(coordinateUncertaintyInMeters))

# Check how many records are left
nrow(insectdata_no_flags) #23547
nrow(insectdata_low_uncertainty)#23516 (removed 31 records - not so bad)

```

## Data exploration

## Analysis

```{r}

```

## Citations

Citing R and packages used, including package version.

```{r}
# Citing all packages used, including the package versions.
report::cite_packages()
```
